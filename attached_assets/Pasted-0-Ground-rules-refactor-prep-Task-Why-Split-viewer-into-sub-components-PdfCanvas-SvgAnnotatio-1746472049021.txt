0 · Ground rules & refactor prep

Task	Why
Split viewer into sub‑components (PdfCanvas, SvgAnnotationLayer, ThumbnailStrip, LayerPanel, PropertyBar)	Keeps each concern tiny and testable.
Central annotation store (zustand, redux toolkit, or valtio)	Shared undo stack, multi‑component sync, optimistic API writes.
One render effect per concern	loadPdfEffect (on doc change) vs renderEffect (on page / scale / rotation change).
1 · Phase 1 – Navigation + Undo/Redo + Safe Rendering
1.1 Page thumbnails & quick nav
Create <ThumbnailStrip />:

tsx
Copy
Edit
// src/components/ThumbnailStrip.tsx
import { memo } from "react";
import * as pdfjs from "pdfjs-dist";

interface Props {
  pdf: pdfjs.PDFDocumentProxy | null;
  current: number;
  onJump: (n: number) => void;
}

export const ThumbnailStrip = memo(({ pdf, current, onJump }: Props) => {
  if (!pdf) return null;
  return (
    <div className="h-24 overflow-x-auto flex gap-1 bg-zinc-200 p-1">
      {Array.from({ length: pdf.numPages }, (_, i) => i + 1).map((n) => (
        <canvas
          key={n}
          data-page={n}
          onClick={() => onJump(n)}
          className={`h-20 w-auto cursor-pointer rounded ${
            n === current ? "ring-2 ring-blue-500" : ""
          }`}
          ref={async (c) => {
            if (!c) return;
            const page = await pdf.getPage(n);
            const v = page.getViewport({ scale: 0.2 });
            c.width = v.width;
            c.height = v.height;
            await page.render({ canvasContext: c.getContext("2d")!, viewport: v })
              .promise;
          }}
        />
      ))}
    </div>
  );
});
Add it above the viewer and wire onPageChange.

1.2 Undo / Redo core
Create a hook (useHistory) that any mutation calls:

ts
Copy
Edit
// hooks/useHistory.ts
import { useCallback, useRef, useState } from "react";
export interface Command {
  do(): void | Promise<void>;
  undo(): void | Promise<void>;
}
export const useHistory = () => {
  const past = useRef<Command[]>([]);
  const future = useRef<Command[]>([]);
  const [, force] = useState({}); // trick to re‑render

  const execute = useCallback(async (cmd: Command) => {
    await cmd.do();
    past.current.push(cmd);
    future.current = [];
    force({});
  }, []);

  const undo = useCallback(async () => {
    const cmd = past.current.pop();
    if (cmd) {
      await cmd.undo();
      future.current.unshift(cmd);
      force({});
    }
  }, []);

  const redo = useCallback(async () => {
    const cmd = future.current.shift();
    if (cmd) {
      await cmd.do();
      past.current.push(cmd);
      force({});
    }
  }, []);

  return { execute, undo, redo, canUndo: !!past.current.length, canRedo: !!future.current.length };
};
Wrap marker create / move calls:

ts
Copy
Edit
// example create
history.execute({
  do: () => createMarkerMutation.mutateAsync(newMarker),
  undo: () => deleteMarkerMutation.mutateAsync(markerId)
});
Add ⌘/Ctrl+Z and ⌘/Ctrl+Shift+Z listeners via react-hotkeys-hook.

1.3 Cancel old renders
Inside EnhancedFloorplanViewer:

ts
Copy
Edit
const renderTaskRef = useRef<pdfjsLib.PDFRenderTask | null>(null);

const renderPage = async (pageNo: number) => {
  if (!pdfDocRef.current || !canvasRef.current) return;
  // cancel previous
  renderTaskRef.current?.cancel("superseded");
  const page = await pdfDocRef.current.getPage(pageNo);
  const viewport = page.getViewport({ scale: computedScale, rotation });
  // ...set sizes...
  const task = page.render({ canvasContext: ctx, viewport });
  renderTaskRef.current = task;
  try {
    await task.promise;
  } catch (e) {
    if (e?.name !== "RenderingCancelledException") console.error(e);
  }
};
useEffect(() => () => renderTaskRef.current?.cancel(), []); // clean up on unmount
2 · Phase 2 – Selection / Property Bar
Add selectedIds: number[] to the annotation store.

<PropertyBar> floated right: color swatch, stroke width, delete button.

On mousedown over SVG without dragging, toggle selection (Shift to multi‑select).

On property change, create an undoable updateMarkerMutation.

3 · Phase 3 – Layer Manager UI
<LayerPanel>: list layers → eye toggle, lock toggle, drag‑drop reorder.

CRUD endpoints already exist—expose them.

Keep panel state in zustand so viewer re‑renders when visibility toggles.

4 · Phase 4 – Text, Highlight, Ink

Tool	Implementation
Text highlight / strikeout	Use pdf.js TextLayerBuilder to overlay <div class="textLayer"> (already in pdf.js examples). Wrap selected clientRects with translucent SVG rect.
Free text / callout	Treat like text marker but render a <foreignObject> so you can use HTML <textarea> while editing, flatten to SVG <text> when done.
Ink / pen	Pointer events → live <path> (store array of points), smooth with perfect-freehand or roughjs-spline. Save as polygon marker with many points.
5 · Phase 5 – Export / Import (PDF + XFDF)
Annot JSON → XFDF (use pdf-annotate serializer or roll tiny generator).

For “flattened PDF”, pipe doc + annotations through pdf-lib:

ts
Copy
Edit
const pdfBytes = await fetchPdfBytes();
const pdfDoc = await PDFLib.PDFDocument.load(pdfBytes);
// draw SVG onto each page canvas via pdf-lib's `embedPng` or `embedSvg`.
// return pdfDoc.save();
Offer “Download Marked PDF” & “Download .xfdf”.

6 · Phase 6 – Performance & Mobile polish
Tile cache (pdfjs-dist/web/pdf_viewer’s PDFPageViewBuffer) or simply keep a Map<pageNo, OffscreenCanvas> of rendered bitmaps.

Pinch‑zoom: integrate use-gesture (@use-gesture/react) → update scale.

Abort page fetches with AbortController when leaving viewer.

Remove preventDefault on touchMove unless tool ≠ pan so page scroll still works.

7 · Phase 7 – Snap, Guides, Measurement Pro
Grid snap: round candidate point to nearest gridSize / pdfToViewportScale.

Ortho lock: while Shift pressed, constrain angle to 0/45/90.

Area & perimeter: on first click start poly, each subsequent click adds vertex, double‑click closes and computes area.

8 · Phase 8 – Autosave, Real‑time multi‑user
Debounce updateMarkerPositionMutation (e.g., fire every 500 ms during drag).

Add version to payload → server returns 409 on mismatch → prompt user to refresh.

Optional: WebSocket stream of remote annotation updates → merge to store.

Phase 1 starter wire‑up (index)
Add the new pieces inside your viewer wrapper:

tsx
Copy
Edit
const history = useHistory();

return (
  <div className="flex flex-col h-full">
    {/* thumbnails */}
    <ThumbnailStrip
      pdf={pdfDocRef.current}
      current={currentPage}
      onJump={onPageChange}
    />

    {/* main canvas area */}
    <div className="flex-1 relative">
      <PdfCanvas ... />
      <SvgAnnotationLayer ... history={history} />
    </div>

    {/* simple undo/redo buttons */}
    <div className="absolute bottom-2 left-2 flex gap-2">
      <button disabled={!history.canUndo} onClick={history.undo}>Undo</button>
      <button disabled={!history.canRedo} onClick={history.redo}>Redo</button>
    </div>
  </div>
);
Hook hotkeys:

ts
Copy
Edit
useHotkeys('mod+z', history.undo, [history.undo]);
useHotkeys('mod+shift+z, mod+y', history.redo, [history.redo]);
How to proceed
Copy Phase 1 code → new branch → QA with a 50‑page PDF.

Merge.

Pick the next phase from the table above and repeat—small PRs, each adds one vertical slice (UI, store action, API integration, undo unit).

When you’re ready for export / flattening I can give you the exact pdf-lib recipe.