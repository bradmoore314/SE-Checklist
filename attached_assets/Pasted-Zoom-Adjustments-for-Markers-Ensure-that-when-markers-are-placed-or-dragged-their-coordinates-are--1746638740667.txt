Zoom Adjustments for Markers:
Ensure that when markers are placed or dragged, their coordinates are recalculated based on the current zoom level (scale) and translation (translateX, translateY).

ts
Copy
Edit
const screenToPdfCoordinates = (screenX: number, screenY: number): Point => {
  const rect = containerRef.current?.getBoundingClientRect();
  if (!rect) return { x: 0, y: 0 };

  // Adjust based on scale and translation
  const result = utilScreenToPdf(
    screenX,
    screenY,
    rect,
    scale,    // Ensure scaling is factored in
    translateX,  // Ensure translation is factored in
    translateY,  // Ensure translation is factored in
    pdfDimensions
  );

  console.log(`Converting Screen(${screenX}, ${screenY}) → PDF(${result.x.toFixed(2)}, ${result.y.toFixed(2)}) @ scale ${scale}`);

  return result;
};
Ensure Consistent Marker Position Updates:
In the handleMouseMove and handleMarkerDrag functions, ensure that the marker position is calculated relative to the zoom scale and translation. Here’s an update for dragging markers:

ts
Copy
Edit
const startMarkerDrag = (e: React.MouseEvent, marker: MarkerData) => {
  const rect = containerRef.current?.getBoundingClientRect();
  if (!rect) return;

  const containerX = e.clientX - rect.left;
  const containerY = e.clientY - rect.top;

  const pdfX = (containerX - translateX) / scale;  // Convert to PDF coordinates considering scale and translation
  const pdfY = (containerY - translateY) / scale;

  const offsetX = pdfX - marker.position_x;
  const offsetY = pdfY - marker.position_y;

  setMarkerDragOffset({ x: offsetX, y: offsetY });
  setSelectedMarker(marker);
  setIsDraggingMarker(true);
  containerRef.current.style.cursor = 'grabbing';
};
Re-render Markers After Zooming:
After zooming, markers should be rendered at the correct position based on the new scale and translate values. This should be handled by adjusting the marker's position according to the new scale and translateX/translateY values.

You can ensure this in your marker rendering code (inside the JSX part of EnhancedFloorplanViewer):

ts
Copy
Edit
<g key={marker.id} transform={`translate(${marker.position_x * scale}, ${marker.position_y * scale})`}>
  {/* Render your markers here, adjusted for scale */}
</g>
Other Considerations:
Resizing Markers: Similarly to the dragging logic, ensure that when resizing markers, the new width and height are adjusted according to the current scale to prevent them from appearing too large or too small when zooming in/out.

SVG Layers and Canvas: Ensure that both SVG (for markers) and the PDF canvas are consistently updated and rendered with the correct transformations (scale and translate).