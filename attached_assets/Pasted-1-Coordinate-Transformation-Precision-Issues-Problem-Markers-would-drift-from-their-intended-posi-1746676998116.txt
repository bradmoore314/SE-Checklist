1. Coordinate Transformation Precision Issues
Problem: Markers would drift from their intended positions when dragging at high zoom levels. The issue was particularly noticeable when placing markers with precision in highly zoomed states.

Root Cause: Fixed decimal precision in coordinate transformations led to rounding errors that accumulated during zoom operations. When zoomed in significantly, tiny mathematical imprecisions became visually noticeable.

Solution: Implemented an adaptive precision system that dynamically adjusts decimal places based on zoom level:

Default zoom: 2 decimal places
10x zoom: 3 decimal places
100x zoom: 4 decimal places
2. PDF-to-SVG Layer Alignment
Problem: The SVG annotation layer would sometimes misalign with the PDF canvas layer, especially after window resizing or during specific browser zoom states.

Root Cause: Viewport dimensions and transformation matrices between the two layers weren't perfectly synchronized, leading to sub-pixel differences that became magnified at certain zoom levels.

Solution: Implemented a synchronized viewport mechanism that ensures both layers use identical transformation parameters and properly handle browser zoom and resize events.

3. Camera Field-of-View Visualization
Problem: Camera markers needed to accurately represent field-of-view angles from 30° to 360°, but we encountered rendering issues with wide-angle and panoramic cameras.

Root Cause: Initial implementation used simple circular sectors which broke down visually at wide angles and didn't correctly represent 360° panoramic cameras.

Solution: Redesigned the camera visualization with:

Special case handling for 360° cameras with a complete circle representation
Properly rendered wide-angle FOVs with appropriate visual indicators
Adjustable range parameters to show coverage distance
4. Performance with Large Floorplans
Problem: Large PDF floorplans with many markers would cause performance degradation, especially during zooming and panning operations.

Root Cause: Constant re-rendering of both the PDF canvas and all SVG elements during interaction, combined with expensive coordinate calculations.

Solution: Implemented performance optimizations:

Throttled rendering during pan operations
Cached PDF rendering at specific zoom levels
Optimized SVG updates to minimize DOM operations
Implemented virtualized rendering for markers (only rendering visible markers)
5. Marker Dragging UX at Different Zoom Levels
Problem: Marker dragging sensitivity needed to be appropriate at all zoom levels—too sensitive at high zoom, not precise enough at low zoom.

Root Cause: Direct mapping of mouse movement to PDF coordinates without accounting for the current zoom level.

Solution: Implemented zoom-aware dragging sensitivity:

Scaled mouse movement deltas based on current zoom level
Added snap-to-grid functionality for precise placement
Implemented keyboard arrow key fine adjustments for pixel-level precision
6. Database Synchronization Conflicts
Problem: Simultaneous marker edits from multiple users or browser tabs created synchronization conflicts and possible data loss.

Root Cause: No optimistic updates or conflict resolution strategies in place.

Solution: Enhanced the data synchronization system:

Implemented versioning for marker positioning
Added conflict detection with resolution strategies
Improved error handling for failed updates
Implemented immediate feedback when changes are saved
7. Layer Management Complexity
Problem: As project complexity grew, managing markers across multiple layers became unwieldy, with selection and visibility issues.

Root Cause: Initial layer implementation treated layers as simple filters rather than first-class organizational elements.

Solution: Redesigned the layer management system:

Created dedicated layer management UI
Implemented drag-and-drop organization of layers
Added layer-specific controls and visibility toggles
Improved layer-based selection and filtering
8. Complex Camera Parameter Editing
Problem: Editing camera parameters (FOV angle, range, rotation) through numeric inputs was unintuitive and error-prone.

Root Cause: Disconnect between visual representation and parameter inputs.

Solution: Created a visual parameter editor:

Interactive handles for adjusting FOV width
Drag-to-rotate functionality
Visual feedback during parameter changes
Direct manipulation of camera visualization
9. Cross-Browser Compatibility
Problem: PDF rendering and SVG interaction behaved inconsistently across different browsers, especially with Safari.

Root Cause: Browser-specific implementations of canvas rendering and SVG event handling.

Solution: Implemented browser detection with specific adaptations:

Browser-specific event handling strategies
Rendering adjustments for Safari's PDF handling
Cross-browser testing automation
These challenges have driven significant improvements in our floorplans feature, resulting in a more robust and sophisticated solution that handles complex real-world usage scenarios.