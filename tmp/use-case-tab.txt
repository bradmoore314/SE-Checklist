        <TabsContent value="use-case">
          <Card className="mb-6">
            <CardHeader className="bg-gradient-to-r from-purple-50 to-indigo-50 border-b">
              <CardTitle className="flex items-center gap-2 text-xl text-purple-800">
                <span className="p-1.5 bg-purple-500 text-white rounded-full w-9 h-9 flex items-center justify-center shadow-sm">
                  <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" className="w-5 h-5">
                    <path strokeLinecap="round" strokeLinejoin="round" d="M19.5 14.25v-2.625a3.375 3.375 0 0 0-3.375-3.375h-1.5A1.125 1.125 0 0 1 13.5 7.125v-1.5a3.375 3.375 0 0 0-3.375-3.375H8.25M9 16.5v.75m3-3v3M15 12v5.25m-4.5-15H5.625c-.621 0-1.125.504-1.125 1.125v17.25c0 .621.504 1.125 1.125 1.125h12.75c.621 0 1.125-.504 1.125-1.125V11.25a9 9 0 0 0-9-9Z" />
                  </svg>
                </span>
                Use Case - SOW - SME
              </CardTitle>
              <CardDescription className="text-base text-purple-700">
                Define the use case, scope of work, and service commitment details for this project
              </CardDescription>
            </CardHeader>
            <CardContent>
              <div className="grid grid-cols-1 gap-6">
                {/* Opportunity Stage Ownership Section */}
                <div className="bg-gradient-to-br from-purple-50 to-indigo-50 p-5 rounded-lg shadow-sm border border-purple-100">
                  <h3 className="text-lg font-semibold mb-4 text-purple-800 flex items-center gap-2">
                    <span className="p-1 bg-purple-500 text-white rounded-md w-7 h-7 flex items-center justify-center text-sm shadow-sm">
                      <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" className="w-4 h-4">
                        <path strokeLinecap="round" strokeLinejoin="round" d="M15 19.128a9.38 9.38 0 0 0 2.625.372 9.337 9.337 0 0 0 4.121-.952 4.125 4.125 0 0 0-7.533-2.493M15 19.128v-.003c0-1.113-.285-2.16-.786-3.07M15 19.128v.106A12.318 12.318 0 0 1 8.624 21c-2.331 0-4.512-.645-6.374-1.766l-.001-.109a6.375 6.375 0 0 1 11.964-3.07M12 6.375a3.375 3.375 0 1 1-6.75 0 3.375 3.375 0 0 1 6.75 0Zm8.25 2.25a2.625 2.625 0 1 1-5.25 0 2.625 2.625 0 0 1 5.25 0Z" />
                      </svg>
                    </span>
                    Opportunity Stage Ownership
                  </h3>
                  <div className="grid grid-cols-3 gap-4">
                    <div>
                      <Label htmlFor="bdmOwner">BDM Name:</Label>
                      <Input 
                        id="bdmOwner"
                        value={formData.bdmOwner} 
                        onChange={(e) => handleFormChange("bdmOwner", e.target.value)}
                        placeholder="Enter BDM name"
                        className="bg-white"
                      />
                    </div>
                    <div>
                      <Label htmlFor="region">Region:</Label>
                      <Select 
                        value={formData.region} 
                        onValueChange={(value) => handleFormChange("region", value)}
                      >
                        <SelectTrigger className="bg-white">
                          <SelectValue placeholder="Select" />
                        </SelectTrigger>
                        <SelectContent>
                          <SelectItem value="Northeast">Northeast</SelectItem>
                          <SelectItem value="Southeast">Southeast</SelectItem>
                          <SelectItem value="Midwest">Midwest</SelectItem>
                          <SelectItem value="West">West</SelectItem>
                          <SelectItem value="Southwest">Southwest</SelectItem>
                        </SelectContent>
                      </Select>
                    </div>
                    <div>
                      <Label htmlFor="customerVertical">Customer Vertical:</Label>
                      <Select 
                        value={formData.customerVertical} 
                        onValueChange={(value) => handleFormChange("customerVertical", value)}
                      >
                        <SelectTrigger className="bg-white">
                          <SelectValue placeholder="Select" />
                        </SelectTrigger>
                        <SelectContent>
                          <SelectItem value="Commercial">Commercial</SelectItem>
                          <SelectItem value="Residential">Residential</SelectItem>
                          <SelectItem value="Industrial">Industrial</SelectItem>
                          <SelectItem value="Healthcare">Healthcare</SelectItem>
                          <SelectItem value="Education">Education</SelectItem>
                          <SelectItem value="Government">Government</SelectItem>
                        </SelectContent>
                      </Select>
                    </div>
                    <div>
                      <Label htmlFor="kvgSme">KVG SME Name:</Label>
                      <Select 
                        value={formData.kvgSme} 
                        onValueChange={(value) => handleFormChange("kvgSme", value)}
                      >
                        <SelectTrigger className="bg-white">
                          <SelectValue placeholder="Select" />
                        </SelectTrigger>
                        <SelectContent>
                          <SelectItem value="John Smith">John Smith</SelectItem>
                          <SelectItem value="Jane Doe">Jane Doe</SelectItem>
                          <SelectItem value="Mark Johnson">Mark Johnson</SelectItem>
                          <SelectItem value="Sarah Williams">Sarah Williams</SelectItem>
                        </SelectContent>
                      </Select>
                    </div>
                    <div>
                      <Label htmlFor="kvgSmeApproval">KVG SME Approval:</Label>
                      <Select 
                        value={formData.useCaseCommitment} 
                        onValueChange={(value) => handleFormChange("useCaseCommitment", value)}
                      >
                        <SelectTrigger className="bg-white">
                          <SelectValue placeholder="Select" />
                        </SelectTrigger>
                        <SelectContent>
                          <SelectItem value="Approved">Approved</SelectItem>
                          <SelectItem value="Pending">Pending</SelectItem>
                          <SelectItem value="Rejected">Rejected</SelectItem>
                        </SelectContent>
                      </Select>
                    </div>
                    <div>
                      <Label htmlFor="propertyCategory">Property Category:</Label>
                      <Select 
                        value={formData.propertyCategory} 
                        onValueChange={(value) => handleFormChange("propertyCategory", value)}
                      >
                        <SelectTrigger className="bg-white">
                          <SelectValue placeholder="Select" />
                        </SelectTrigger>
                        <SelectContent>
                          <SelectItem value="Office">Office</SelectItem>
                          <SelectItem value="Retail">Retail</SelectItem>
                          <SelectItem value="Multi-Family">Multi-Family</SelectItem>
                          <SelectItem value="Mixed-Use">Mixed-Use</SelectItem>
                          <SelectItem value="Industrial">Industrial</SelectItem>
                        </SelectContent>
                      </Select>
                    </div>
                  </div>
                </div>
                
                {/* SOW Outline Section */}
                <div className="bg-gradient-to-br from-indigo-50 to-blue-50 p-5 rounded-lg shadow-sm border border-indigo-100">
                  <h3 className="text-lg font-semibold mb-4 text-indigo-800 flex items-center gap-2">
                    <span className="p-1 bg-indigo-500 text-white rounded-md w-7 h-7 flex items-center justify-center text-sm shadow-sm">
                      <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" className="w-4 h-4">
                        <path strokeLinecap="round" strokeLinejoin="round" d="M11.35 3.836c-.065.21-.1.433-.1.664 0 .414.336.75.75.75h4.5a.75.75 0 0 0 .75-.75 2.25 2.25 0 0 0-.1-.664m-5.8 0A2.251 2.251 0 0 1 13.5 2.25H15c1.012 0 1.867.668 2.15 1.586m-5.8 0c-.376.023-.75.05-1.124.08C9.095 4.01 8.25 4.973 8.25 6.108V8.25m8.9-4.414c.376.023.75.05 1.124.08 1.131.094 1.976 1.057 1.976 2.192V16.5A2.25 2.25 0 0 1 18 18.75h-2.25m-7.5-10.5H4.875c-.621 0-1.125.504-1.125 1.125v11.25c0 .621.504 1.125 1.125 1.125h9.75c.621 0 1.125-.504 1.125-1.125V18.75m-7.5-10.5h6.375c.621 0 1.125.504 1.125 1.125v9.375m-8.25-3 1.5 1.5 3-3.75" />
                      </svg>
                    </span>
                    SOW Outline
                  </h3>
                  <div className="grid grid-cols-3 gap-4 mb-4">
                    <div>
                      <Label htmlFor="technologyDeployed">Technology Designed/Deployed:</Label>
                      <Select 
                        value={formData.technologyDeployed} 
                        onValueChange={(value) => handleFormChange("technologyDeployed", value)}
                      >
                        <SelectTrigger className="bg-white">
                          <SelectValue placeholder="Select" />
                        </SelectTrigger>
                        <SelectContent>
                          <SelectItem value="KastlePresence">KastlePresence</SelectItem>
                          <SelectItem value="KastleVideo">KastleVideo</SelectItem>
                          <SelectItem value="KastleAccess">KastleAccess</SelectItem>
                          <SelectItem value="KastleFrontOffice">KastleFrontOffice</SelectItem>
                        </SelectContent>
                      </Select>
                    </div>
                    <div>
                      <Label htmlFor="cameraType">Type of Cameras:</Label>
                      <Select 
                        value={formData.cameraType} 
                        onValueChange={(value) => handleFormChange("cameraType", value)}
                      >
                        <SelectTrigger className="bg-white">
                          <SelectValue placeholder="Select" />
                        </SelectTrigger>
                        <SelectContent>
                          <SelectItem value="Fixed">Fixed</SelectItem>
                          <SelectItem value="PTZ">PTZ</SelectItem>
                          <SelectItem value="Dome">Dome</SelectItem>
                          <SelectItem value="Bullet">Bullet</SelectItem>
                          <SelectItem value="Mixed">Mixed</SelectItem>
                        </SelectContent>
                      </Select>
                    </div>
                    <div>
                      <Label htmlFor="rspndrGdods">RSPNDR - GDoDS:</Label>
                      <Select 
                        value={formData.rspndrGdods} 
                        onValueChange={(value) => handleFormChange("rspndrGdods", value)}
                      >
                        <SelectTrigger className="bg-white">
                          <SelectValue placeholder="Select" />
                        </SelectTrigger>
                        <SelectContent>
                          <SelectItem value="Yes">Yes</SelectItem>
                          <SelectItem value="No">No</SelectItem>
                        </SelectContent>
                      </Select>
                    </div>
                    <div>
                      <Label htmlFor="installType">Type of Install Account:</Label>
                      <Select 
                        value={formData.installType} 
                        onValueChange={(value) => handleFormChange("installType", value)}
                      >
                        <SelectTrigger className="bg-white">
                          <SelectValue placeholder="Select" />
                        </SelectTrigger>
                        <SelectContent>
                          <SelectItem value="New Install">New Install</SelectItem>
                          <SelectItem value="Takeover">Takeover</SelectItem>
                          <SelectItem value="Upgrade">Upgrade</SelectItem>
                          <SelectItem value="Extension">Extension</SelectItem>
                        </SelectContent>
                      </Select>
                    </div>
                    <div>
                      <Label htmlFor="rspndrSubscriptions">RSPNDR Subscriptions:</Label>
                      <Select 
                        value={formData.rspndrSubscriptions} 
                        onValueChange={(value) => handleFormChange("rspndrSubscriptions", value)}
                      >
                        <SelectTrigger className="bg-white">
                          <SelectValue placeholder="Select" />
                        </SelectTrigger>
                        <SelectContent>
                          <SelectItem value="Standard">Standard</SelectItem>
                          <SelectItem value="Premium">Premium</SelectItem>
                          <SelectItem value="Enterprise">Enterprise</SelectItem>
                          <SelectItem value="None">None</SelectItem>
                        </SelectContent>
                      </Select>
                    </div>
                  </div>
                  
                  {/* Stream counts */}
                  <div className="grid grid-cols-6 gap-2 mb-6">
                    <div>
                      <Label htmlFor="eventVideoTriggerStreams">Event Video|Trigger Streams:</Label>
                      <Input 
                        id="eventVideoTriggerStreams"
                        type="number"
                        value={formData.eventVideoTriggerStreams.toString()} 
                        onChange={(e) => handleFormChange("eventVideoTriggerStreams", parseInt(e.target.value) || 0)}
                        placeholder="0"
                        className="bg-white"
                      />
                    </div>
                    <div>
                      <Label htmlFor="virtualPatrolStreams">Virtual Patrol Streams:</Label>
                      <Input 
                        id="virtualPatrolStreams"
                        type="number"
                        value={formData.virtualPatrolStreams.toString()} 
                        onChange={(e) => handleFormChange("virtualPatrolStreams", parseInt(e.target.value) || 0)}
                        placeholder="0"
                        className="bg-white"
                      />
                    </div>
                    <div>
                      <Label htmlFor="eventActionClipStreams">Event Action Clip Streams:</Label>
                      <Input 
                        id="eventActionClipStreams"
                        type="number"
                        value={formData.eventActionClipStreams.toString()} 
                        onChange={(e) => handleFormChange("eventActionClipStreams", parseInt(e.target.value) || 0)}
                        placeholder="0"
                        className="bg-white"
                      />
                    </div>
                    <div>
                      <Label htmlFor="eventActionMultiViewStreams">Event Action Multi-View Streams:</Label>
                      <Input 
                        id="eventActionMultiViewStreams"
                        type="number"
                        value={formData.eventActionMultiViewStreams.toString()} 
                        onChange={(e) => handleFormChange("eventActionMultiViewStreams", parseInt(e.target.value) || 0)}
                        placeholder="0"
                        className="bg-white"
                      />
                    </div>
                    <div>
                      <Label htmlFor="healthStreams">Health Streams:</Label>
                      <Input 
                        id="healthStreams"
                        type="number"
                        value={formData.healthStreams.toString()} 
                        onChange={(e) => handleFormChange("healthStreams", parseInt(e.target.value) || 0)}
                        placeholder="0"
                        className="bg-white"
                      />
                    </div>
                    <div>
                      <Label htmlFor="audioTalkDownSpeakers">Audio Talk-Down Speakers:</Label>
                      <Input 
                        id="audioTalkDownSpeakers"
                        type="number"
                        value={formData.audioTalkDownSpeakers.toString()} 
                        onChange={(e) => handleFormChange("audioTalkDownSpeakers", parseInt(e.target.value) || 0)}
                        placeholder="0"
                        className="bg-white"
                      />
                    </div>
                  </div>
                  
                  {/* Monitoring details */}
                  <div className="grid grid-cols-4 gap-2 mb-6">
                    <div>
                      <Label htmlFor="totalEventsPerMonth">Total Events/Month - Maximum:</Label>
                      <Input 
                        id="totalEventsPerMonth"
                        type="number"
                        value={formData.totalEventsPerMonth.toString()} 
                        onChange={(e) => handleFormChange("totalEventsPerMonth", parseInt(e.target.value) || 0)}
                        placeholder="0"
                        className="bg-white"
                      />
                    </div>
                    <div>
                      <Label htmlFor="totalVirtualPatrolsPerMonth">Total Virtual Patrols/Month:</Label>
                      <Input 
                        id="totalVirtualPatrolsPerMonth"
                        type="number"
                        value={formData.totalVirtualPatrolsPerMonth.toString()} 
                        onChange={(e) => handleFormChange("totalVirtualPatrolsPerMonth", parseInt(e.target.value) || 0)}
                        placeholder="0"
                        className="bg-white"
                      />
                    </div>
                    <div>
                      <Label htmlFor="patrolFrequency">Patrol Frequency:</Label>
                      <Input 
                        id="patrolFrequency"
                        value={formData.patrolFrequency} 
                        onChange={(e) => handleFormChange("patrolFrequency", e.target.value)}
                        placeholder="Hourly/30 Mins/Other"
                        className="bg-white"
                      />
                    </div>
                    <div>
                      <Label htmlFor="totalHealthPatrolsPerMonth">Total Health Patrols/Month:</Label>
                      <Input 
                        id="totalHealthPatrolsPerMonth"
                        type="number"
                        value={formData.totalHealthPatrolsPerMonth.toString()} 
                        onChange={(e) => handleFormChange("totalHealthPatrolsPerMonth", parseInt(e.target.value) || 0)}
                        placeholder="0"
                        className="bg-white"
                      />
                    </div>
                    <div>
                      <Label htmlFor="totalEventActionMultiViewsPerMonth">Total Event Action Multi-Views/Month:</Label>
                      <Input 
                        id="totalEventActionMultiViewsPerMonth"
                        type="number"
                        value={formData.totalEventActionMultiViewsPerMonth.toString()} 
                        onChange={(e) => handleFormChange("totalEventActionMultiViewsPerMonth", parseInt(e.target.value) || 0)}
                        placeholder="0"
                        className="bg-white"
                      />
                    </div>
                    <div>
                      <Label htmlFor="totalEscalationsMaximum">Total Escalations - Maximum:</Label>
                      <Input 
                        id="totalEscalationsMaximum"
                        type="number"
                        value={formData.totalEscalationsMaximum.toString()} 
                        onChange={(e) => handleFormChange("totalEscalationsMaximum", parseInt(e.target.value) || 0)}
                        placeholder="0"
                        className="bg-white"
                      />
                    </div>
                    <div>
                      <Label htmlFor="gdodsDispatchesPerMonth">GDoDS - Dispatches/Month:</Label>
                      <Input 
                        id="gdodsDispatchesPerMonth"
                        type="number"
                        value={formData.gdodsDispatchesPerMonth.toString()} 
                        onChange={(e) => handleFormChange("gdodsDispatchesPerMonth", parseInt(e.target.value) || 0)}
                        placeholder="0"
                        className="bg-white"
                      />
                    </div>
                    <div>
                      <Label htmlFor="sgppScheduledPatrolsPerMonth">SGPP - Scheduled Patrols/Month:</Label>
                      <Input 
                        id="sgppScheduledPatrolsPerMonth"
                        type="number"
                        value={formData.sgppScheduledPatrolsPerMonth.toString()} 
                        onChange={(e) => handleFormChange("sgppScheduledPatrolsPerMonth", parseInt(e.target.value) || 0)}
                        placeholder="0"
                        className="bg-white"
                      />
                    </div>
                  </div>
                  
                  {/* Patrol details */}
                  <div className="grid grid-cols-1 gap-4 mb-6">
                    <div>
                      <Label htmlFor="onDemandGuardDispatchDetail">On Demand Guard Dispatch Detail:</Label>
                      <Textarea 
                        id="onDemandGuardDispatchDetail"
                        value={formData.onDemandGuardDispatchDetail} 
                        onChange={(e) => handleFormChange("onDemandGuardDispatchDetail", e.target.value)}
                        placeholder="Fill in what the Guard needs to do on the Dispatches, expand in the SOW if needed"
                        className="bg-white min-h-[80px]"
                      />
                    </div>
                    <div>
                      <Label htmlFor="sgppScheduledGuardPatrolDetail">SGPP - Scheduled Guard Patrol Detail:</Label>
                      <Textarea 
                        id="sgppScheduledGuardPatrolDetail"
                        value={formData.sgppScheduledGuardPatrolDetail} 
                        onChange={(e) => handleFormChange("sgppScheduledGuardPatrolDetail", e.target.value)}
                        placeholder="Fill in what the Guard needs to do on Scheduled Patrols, expand in the SOW if needed"
                        className="bg-white min-h-[80px]"
                      />
                    </div>
                    <div>
                      <Label htmlFor="sgppScheduledGuardPatrolsScheduleDetail">SGPP - Scheduled Guard Patrols - Schedule Detail:</Label>
                      <Textarea 
                        id="sgppScheduledGuardPatrolsScheduleDetail"
                        value={formData.sgppScheduledGuardPatrolsScheduleDetail} 
                        onChange={(e) => handleFormChange("sgppScheduledGuardPatrolsScheduleDetail", e.target.value)}
                        placeholder="Fill in schedule details for the days of week/month, hours of day, frequency of patrols, expand in the SOW if needed"
                        className="bg-white min-h-[80px]"
                      />
                    </div>
                  </div>
                  
                  {/* Incident Types Section */}
                  <div className="bg-gradient-to-br from-blue-50 to-purple-50 p-5 rounded-lg shadow-sm border border-blue-100 mb-6">
                    <h3 className="text-lg font-semibold mb-2 text-blue-800 flex items-center gap-2">
                      <span className="p-1 bg-blue-500 text-white rounded-md w-7 h-7 flex items-center justify-center text-sm shadow-sm">
                        <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" className="w-4 h-4">
                          <path strokeLinecap="round" strokeLinejoin="round" d="M12 9v3.75m-9.303 3.376c-.866 1.5.217 3.374 1.948 3.374h14.71c1.73 0 2.813-1.874 1.948-3.374L13.949 3.378c-.866-1.5-3.032-1.5-3.898 0L2.697 16.126ZM12 15.75h.007v.008H12v-.008Z" />
                        </svg>
                      </span>
                      Incident Types to be Monitored
                    </h3>
                    <p className="text-sm text-blue-700 mb-4 ml-9">Typically 3-4 max per camera stream. Clarify in use case and if needed call out unique use cases per camera in the camera list below.</p>
                    
                    <div className="grid grid-cols-3 gap-4">
                      {/* Criminal Activity Group */}
                      <div>
                        <div className="flex items-center justify-between mb-2">
                          <Toggle 
                            pressed={formData.obviousCriminalAct}
                            onPressedChange={(value) => handleFormChange("obviousCriminalAct", value)}
                            className="data-[state=on]:bg-green-500"
                          >
                            OBVIOUS CRIMINAL ACT
                          </Toggle>
                          <span className="text-xs">{formData.obviousCriminalAct ? "Yes" : "No"}</span>
                        </div>
                        <div className="flex items-center justify-between mb-2">
                          <Toggle 
                            pressed={formData.activeBreakIn}
                            onPressedChange={(value) => handleFormChange("activeBreakIn", value)}
                            className="data-[state=on]:bg-green-500"
                          >
                            ACTIVE BREAK-IN
                          </Toggle>
                          <span className="text-xs">{formData.activeBreakIn ? "Yes" : "No"}</span>
                        </div>
                        <div className="flex items-center justify-between mb-2">
                          <Toggle 
                            pressed={formData.destructionOfProperty}
                            onPressedChange={(value) => handleFormChange("destructionOfProperty", value)}
                            className="data-[state=on]:bg-green-500"
                          >
                            DESTRUCTION OF PROPERTY
                          </Toggle>
                          <span className="text-xs">{formData.destructionOfProperty ? "Yes" : "No"}</span>
                        </div>
                        <div className="flex items-center justify-between mb-2">
                          <Toggle 
                            pressed={formData.carDrivingThroughGate}
                            onPressedChange={(value) => handleFormChange("carDrivingThroughGate", value)}
                            className="data-[state=on]:bg-green-500"
                          >
                            CAR DRIVING THROUGH GATE
                          </Toggle>
                          <span className="text-xs">{formData.carDrivingThroughGate ? "Yes" : "No"}</span>
                        </div>
                        <div className="flex items-center justify-between mb-2">
                          <Toggle 
                            pressed={formData.suspiciousActivity}
                            onPressedChange={(value) => handleFormChange("suspiciousActivity", value)}
                            className="data-[state=on]:bg-green-500"
                          >
                            SUSPICIOUS ACTIVITY
                          </Toggle>
                          <span className="text-xs">{formData.suspiciousActivity ? "Yes" : "No"}</span>
                        </div>
                      </div>
                      
                      {/* Nuisance & Restricted Access Group */}
                      <div>
                        <div className="flex items-center justify-between mb-2">
                          <Toggle 
                            pressed={formData.urinationOrOtherBodilyFunctions}
                            onPressedChange={(value) => handleFormChange("urinationOrOtherBodilyFunctions", value)}
                            className="data-[state=on]:bg-green-500"
                          >
                            URINATION OR BODILY FUNCTIONS
                          </Toggle>
                          <span className="text-xs">{formData.urinationOrOtherBodilyFunctions ? "Yes" : "No"}</span>
                        </div>
                        <div className="flex items-center justify-between mb-2">
                          <Toggle 
                            pressed={formData.presenceOfScooters}
                            onPressedChange={(value) => handleFormChange("presenceOfScooters", value)}
                            className="data-[state=on]:bg-green-500"
                          >
                            PRESENCE OF SCOOTERS
                          </Toggle>
                          <span className="text-xs">{formData.presenceOfScooters ? "Yes" : "No"}</span>
                        </div>
                        <div className="flex items-center justify-between mb-2">
                          <Toggle 
                            pressed={formData.emergencyServices}
                            onPressedChange={(value) => handleFormChange("emergencyServices", value)}
                            className="data-[state=on]:bg-green-500"
                          >
                            EMERGENCY SERVICES ON SITE
                          </Toggle>
                          <span className="text-xs">{formData.emergencyServices ? "Yes" : "No"}</span>
                        </div>
                        <div className="flex items-center justify-between mb-2">
                          <Toggle 
                            pressed={formData.personInRestrictedArea}
                            onPressedChange={(value) => handleFormChange("personInRestrictedArea", value)}
                            className="data-[state=on]:bg-green-500"
                          >
                            PERSON IN RESTRICTED AREA
                          </Toggle>
                          <span className="text-xs">{formData.personInRestrictedArea ? "Yes" : "No"}</span>
                        </div>
                        <div className="flex items-center justify-between mb-2">
                          <Toggle 
                            pressed={formData.sittingOrSleeping}
                            onPressedChange={(value) => handleFormChange("sittingOrSleeping", value)}
                            className="data-[state=on]:bg-green-500"
                          >
                            SITTING OR SLEEPING IN AREA
                          </Toggle>
                          <span className="text-xs">{formData.sittingOrSleeping ? "Yes" : "No"}</span>
                        </div>
                      </div>
                      
                      {/* Loitering Group */}
                      <div>
                        <div className="flex items-center justify-between mb-2">
                          <Toggle 
                            pressed={formData.loitering}
                            onPressedChange={(value) => handleFormChange("loitering", value)}
                            className="data-[state=on]:bg-green-500"
                          >
                            LOITERING
                          </Toggle>
                          <span className="text-xs">{formData.loitering ? "Yes" : "No"}</span>
                        </div>
                        <div className="flex items-center justify-between mb-2">
                          <Toggle 
                            pressed={formData.activeGathering}
                            onPressedChange={(value) => handleFormChange("activeGathering", value)}
                            className="data-[state=on]:bg-green-500"
                          >
                            ACTIVE GATHERING
                          </Toggle>
                          <span className="text-xs">{formData.activeGathering ? "Yes" : "No"}</span>
                        </div>
                        <div className="flex items-center justify-between mb-2">
                          <Toggle 
                            pressed={formData.groupsLoiteringGathering}
                            onPressedChange={(value) => handleFormChange("groupsLoiteringGathering", value)}
                            className="data-[state=on]:bg-green-500"
                          >
                            GROUPS LOITERING/GATHERING
                          </Toggle>
                          <span className="text-xs">{formData.groupsLoiteringGathering ? "Yes" : "No"}</span>
                        </div>
                        <div className="flex items-center justify-between mb-2">
                          <Toggle 
                            pressed={formData.homelessVagrant}
                            onPressedChange={(value) => handleFormChange("homelessVagrant", value)}
                            className="data-[state=on]:bg-green-500"
                          >
                            HOMELESS/VAGRANT
                          </Toggle>
                          <span className="text-xs">{formData.homelessVagrant ? "Yes" : "No"}</span>
                        </div>
                        <div className="flex items-center justify-between mb-2">
                          <Toggle 
                            pressed={formData.sleepingOnSiteEncampments}
                            onPressedChange={(value) => handleFormChange("sleepingOnSiteEncampments", value)}
                            className="data-[state=on]:bg-green-500"
                          >
                            SLEEPING ON SITE/ENCAMPMENTS
                          </Toggle>
                          <span className="text-xs">{formData.sleepingOnSiteEncampments ? "Yes" : "No"}</span>
                        </div>
                      </div>
                    </div>
                    
                    {/* Custom Incident Types */}
                    <div className="mt-6 pt-4 border-t border-blue-200">
                      <h4 className="text-md font-semibold mb-4 text-blue-700 flex items-center gap-2">
                        <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" className="w-5 h-5">
                          <path strokeLinecap="round" strokeLinejoin="round" d="M12 9v6m3-3H9m12 0a9 9 0 1 1-18 0 9 9 0 0 1 18 0Z" />
                        </svg>
                        Custom Incident Types
                      </h4>
                      <div className="grid grid-cols-3 gap-4">
                        <div className="flex items-center gap-2 bg-white/50 p-2 rounded border border-gray-200">
                          <Input 
                          value={formData.customIncidentType1}
                          onChange={(e) => handleFormChange("customIncidentType1", e.target.value)}
                          placeholder="Custom incident type"
                          className="bg-white flex-1"
                        />
                        <Toggle 
                          pressed={formData.customIncidentType1Selected}
                          onPressedChange={(value) => handleFormChange("customIncidentType1Selected", value)}
                          className="data-[state=on]:bg-green-500"
                        >
                          {formData.customIncidentType1Selected ? "Yes" : "No"}
                        </Toggle>
                      </div>
                      <div className="flex items-center gap-2">
                        <Input 
                          value={formData.customIncidentType2}
                          onChange={(e) => handleFormChange("customIncidentType2", e.target.value)}
                          placeholder="Custom incident type"
                          className="bg-white flex-1"
                        />
                        <Toggle 
                          pressed={formData.customIncidentType2Selected}
                          onPressedChange={(value) => handleFormChange("customIncidentType2Selected", value)}
                          className="data-[state=on]:bg-green-500"
                        >
                          {formData.customIncidentType2Selected ? "Yes" : "No"}
                        </Toggle>
                      </div>
                      <div className="flex items-center gap-2">
                        <Input 
                          value={formData.customIncidentType3}
                          onChange={(e) => handleFormChange("customIncidentType3", e.target.value)}
                          placeholder="Custom incident type"
                          className="bg-white flex-1"
                        />
                        <Toggle 
                          pressed={formData.customIncidentType3Selected}
                          onPressedChange={(value) => handleFormChange("customIncidentType3Selected", value)}
                          className="data-[state=on]:bg-green-500"
                        >
                          {formData.customIncidentType3Selected ? "Yes" : "No"}
                        </Toggle>
                      </div>
                    </div>
                  </div>
                  
                  {/* Use Case Commitment and Response */}
                  <div className="grid grid-cols-1 gap-4 mb-6">
                    <div>
                      <Label htmlFor="useCaseCommitment">Use Case Commitment:</Label>
                      <Textarea 
                        id="useCaseCommitment"
                        value={formData.useCaseCommitment} 
                        onChange={(e) => handleFormChange("useCaseCommitment", e.target.value)}
                        placeholder="Fill in or modify from Discovery tab"
                        className="bg-white min-h-[80px]"
                      />
                    </div>
                    <div>
                      <Label htmlFor="useCaseResponse">Use Case Response:</Label>
                      <Textarea 
                        id="useCaseResponse"
                        value={formData.useCaseResponse} 
                        onChange={(e) => handleFormChange("useCaseResponse", e.target.value)}
                        placeholder="Fill in or modify from Discovery tab, add in any needs for RSPNDR Guard Dispatch on Demand Services"
                        className="bg-white min-h-[80px]"
                      />
                    </div>
                    <div>
                      <Label htmlFor="sowDetailedOutline">SOW Detailed Outline:</Label>
                      <Textarea 
                        id="sowDetailedOutline"
                        value={formData.sowDetailedOutline} 
                        onChange={(e) => handleFormChange("sowDetailedOutline", e.target.value)}
                        placeholder="Fill in from price quoting worksheet"
                        className="bg-white min-h-[80px]"
                      />
                    </div>
                    <div>
                      <Label htmlFor="scheduleDetails">Schedule Details:</Label>
                      <Textarea 
                        id="scheduleDetails"
                        value={formData.scheduleDetails} 
                        onChange={(e) => handleFormChange("scheduleDetails", e.target.value)}
                        placeholder="Fill in from tab on or detail complex schedules based on different days or camera groups"
                        className="bg-white min-h-[80px]"
                      />
                    </div>
                  </div>
                </div>
                
                {/* Quote Attachment Section */}
                <div className="bg-gray-100 p-4 rounded">
                  <h3 className="text-lg font-semibold mb-4">Paste Screen-shot of KVG Services Quote</h3>
                  <div className="border-2 border-dashed border-gray-300 rounded p-8 text-center mb-4">
                    <div className="text-center mb-4">
                      <Label htmlFor="quoteScreenshot" className="cursor-pointer flex flex-col items-center justify-center">
                        <div className="w-12 h-12 rounded-full bg-purple-100 flex items-center justify-center mb-2">
                          <ImageIcon className="h-6 w-6 text-purple-600" />
                        </div>
                        <span className="text-sm font-medium text-gray-900">Click to upload quote screenshot</span>
                        <span className="text-xs text-gray-500">SVG, PNG, JPG or GIF (max. 10MB)</span>
                        <Input id="quoteScreenshot" type="file" className="hidden" />
                      </Label>
                    </div>
                    <p className="text-sm text-gray-500 max-w-md mx-auto mb-4">
                      The KVG SME Quote must be attached before completing any CRM Opportunity Quote.
                    </p>
                  </div>
                  <div className="mb-4">
                    <Label htmlFor="quoteWithSowAttached">Quote with SOW Attached:</Label>
                    <Select 
                      value={formData.quoteWithSowAttached} 
                      onValueChange={(value) => handleFormChange("quoteWithSowAttached", value)}
                    >
                      <SelectTrigger className="bg-white">
                        <SelectValue placeholder="Select" />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="Yes">Yes</SelectItem>
                        <SelectItem value="No">No</SelectItem>
                        <SelectItem value="Select">Select</SelectItem>
                      </SelectContent>
                    </Select>
                  </div>
                </div>
                
                {/* KVG Services Configuration Section */}
                <div className="bg-gray-100 p-4 rounded">
                  <h3 className="text-lg font-semibold mb-4">Paste spreadsheet of KVG Services configuration from Calculator</h3>
                  <div className="border-2 border-dashed border-gray-300 rounded p-8 text-center mb-4">
                    <div className="text-center mb-4">
                      <Label htmlFor="configSpreadsheet" className="cursor-pointer flex flex-col items-center justify-center">
                        <div className="w-12 h-12 rounded-full bg-purple-100 flex items-center justify-center mb-2">
                          <ImageIcon className="h-6 w-6 text-purple-600" />
                        </div>
                        <span className="text-sm font-medium text-gray-900">Click to upload spreadsheet</span>
                        <span className="text-xs text-gray-500">SVG, PNG, JPG or GIF (max. 10MB)</span>
                        <Input id="configSpreadsheet" type="file" className="hidden" />
                      </Label>
                    </div>
                    <p className="text-sm text-gray-500 max-w-md mx-auto mb-4">
                      KVG SME to paste in this area from the KVG calculator "KVG Process Output" Rows 6 to End and Column A-Q. Paste in same columns here and add pics in columns designated after R.
                    </p>
                  </div>
                  <div className="mb-4">
                    <Label htmlFor="quoteDesignAttached">Quote Design Attached:</Label>
                    <Select 
                      value={formData.quoteDesignAttached} 
                      onValueChange={(value) => handleFormChange("quoteDesignAttached", value)}
                    >
                      <SelectTrigger className="bg-white">
                        <SelectValue placeholder="Select" />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="Yes">Yes</SelectItem>
                        <SelectItem value="No">No</SelectItem>
                        <SelectItem value="Select">Select</SelectItem>
                      </SelectContent>
                    </Select>
                  </div>
                </div>
              </div>
            </CardContent>
          </Card>
        </TabsContent>
